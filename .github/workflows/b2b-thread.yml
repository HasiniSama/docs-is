name: B2B Docs Issue Notifier

on:
  schedule:
    - cron: '0 3 * * *'  # every day at 03:00 UTC
  workflow_dispatch:     # allow manual runs

jobs:
  notify_b2b_docs_issues:
    runs-on: ubuntu-latest

    steps:
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install requests library
        run: pip install requests

      - name: Fetch and notify open B2B Docs issues
        env:
          REPO: 'wso2/product-is'
          GOOGLE_CHAT_WEBHOOK_URL: ${{ secrets.GOOGLE_CHAT_WEBHOOK_URL }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python <<EOF
          import os
          import requests
          import urllib.parse
          import json

          print("🔧 Starting B2B Docs Issue Notifier script...")

          repo = os.environ["REPO"]
          token = os.environ["GITHUB_TOKEN"]
          webhook_url = os.environ["GOOGLE_CHAT_WEBHOOK_URL"]

          print(f"📦 Repo: {repo}")
          print(f"🔐 GitHub token present: {'Yes' if token else 'No'}")
          print(f"🌐 Google Chat webhook set: {'Yes' if webhook_url else 'No'}")

          headers = {
              "Authorization": f"token {token}",
              "Accept": "application/vnd.github.v3+json"
          }

          query = f"repo:{repo} is:issue is:open label:Type/Docs label:Team/B2B"
          encoded_query = urllib.parse.quote_plus(query)
          api_url = f"https://api.github.com/search/issues?q={encoded_query}"

          print(f"🔎 GitHub Search API URL: {api_url}")

          response = requests.get(api_url, headers=headers)
          print(f"📥 GitHub API response status: {response.status_code}")

          try:
              json_data = response.json()
              print("🧾 Raw GitHub API response:")
              print(json.dumps(json_data, indent=2))
          except Exception as e:
              print("❌ Failed to decode JSON from GitHub response:", e)
              raise

          issues = json_data.get("items", [])

          if not issues:
              message = "✅ No open B2B Docs issues found."
          else:
              message = f"🚨 <b>{len(issues)} open B2B Docs issues found:</b><br><br>"
              for idx, issue in enumerate(issues[:10], 1):
                  title = issue['title']
                  url = issue['html_url']
                  message += f"{idx}. {title} <a href='{url}'>🔗</a><br>"

          print("📤 Final message content:")
          print(message)

          chat_payload = {
              "cards": [
                  {
                      "header": {
                          "title": "B2B Doc Issue Notifier",  # This sets the visible thread name
                          "subtitle": f"{repo}",
                          "imageUrl": "https://cdn-icons-png.flaticon.com/512/2626/2626061.png"
                      }
                  }
              ]
          }

          thread_key = "B2BDocIssueNotifier"
          chat_url = webhook_url + "&threadKey=" + urllib.parse.quote_plus(thread_key) + "&messageReplyOption=REPLY_MESSAGE_FALLBACK_TO_NEW_THREAD"

          print("📡 Sending message to Google Chat...")
          r = requests.post(chat_url, json=chat_payload)
          print(f"📨 Google Chat response status: {r.status_code}")
          r.raise_for_status()

          print("✅ Message sent successfully.")
          EOF
